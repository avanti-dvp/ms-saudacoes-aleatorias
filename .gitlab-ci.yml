# Define a imagem Docker padrão para todos os jobs da pipeline
default:
  image: golang:1.24-alpine

# Define os estágios da pipeline. Os jobs são executados na ordem dos estágios.
stages:
  - lint
  - test
  - build
  - deploy

# Variáveis globais disponíveis para todos os jobs
variables:
  # Define o nome da imagem Docker que será construída
  IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  # Define a tag da imagem, usando o ID do commit para garantir unicidade
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# Job para verificar formatação e erros comuns no código Go
lint-code:
  stage: lint
  script:
    - echo "Linting code..."
    - go fmt $(go list ./...)
    - go vet $(go list ./...)

# Job para executar os testes da aplicação
run-tests:
  stage: test
  script:
    - echo "Running tests..."
    - apk add --no-cache build-base gcc
    - CGO_ENABLED=1 go test -v ./... # O -v mostra o resultado de todos os testes

# Job para construir a imagem Docker e enviá-la para o GitLab Container Registry
build-and-push-image:
  stage: build
  # Usa a imagem oficial do Docker para executar comandos docker
  image: docker:24.0.5
  # Requer que o serviço Docker-in-Docker esteja disponível
  services:
    - docker:24.0.5-dind
  before_script:
    # Faz login no GitLab Container Registry usando variáveis de ambiente seguras fornecidas pelo GitLab
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    # Constrói a imagem usando o Dockerfile do projeto
    # O Dockerfile já está otimizado com multi-stage build
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - echo "Pushing Docker image to GitLab Registry..."
    # Envia a imagem construída para o registry
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

# Job para acionar o deploy no Render
deploy-to-render:
  stage: deploy
  # Usa uma imagem leve com cURL para fazer a chamada ao deploy hook
  image: curlimages/curl:latest
  script:
    - echo "Triggering deployment on Render..."
    # Executa a chamada para o Deploy Hook do Render.
    # A URL do hook deve ser configurada como uma variável de ambiente no GitLab.
    - 'curl -X POST "$RENDER_DEPLOY_HOOK_URL"'
  # Este job só deve ser executado na branch 'main'
  only:
    - main