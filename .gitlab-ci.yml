# Define a imagem Docker padrão para todos os jobs da pipeline
default:
  image: golang:1.24-alpine

# Define os estágios da pipeline. Os jobs são executados na ordem dos estágios.
stages:
  - lint
  - test
  - build
  - deploy

# Variáveis globais disponíveis para todas as tarefas da pipeline.
variables:
  # Define o nome da imagem Docker. Use seu usuário do Docker Hub.
  DOCKER_USER: taotreinatec
  DOCKER_IMAGE_NAME: $DOCKER_USER/ms-saudacoes-aleatorias
  # Usa o SHA do commit como tag da imagem para garantir o versionamento.
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# Job para verificar formatação e erros comuns no código Go
lint-code:
  stage: lint
  script:
    - echo "Linting code..."
    - go fmt $(go list ./...)
    - go vet $(go list ./...)

golangci-lint:
  stage: lint
  # Usa a imagem oficial do golangci-lint.
  image: golangci/golangci-lint:v2.2-alpine
  script:
    - echo "Executando linter no código..."
    # Executa o linter. O cache é limpo para garantir uma verificação completa.
    - golangci-lint run --verbose

# Job para executar os testes da aplicação
run-tests:
  stage: test
  script:
    - echo "Running tests..."
    - apk add --no-cache build-base gcc
    - CGO_ENABLED=1 go test -v ./... # O -v mostra o resultado de todos os testes

# Job para construir a imagem Docker e enviá-la para o GitLab Container Registry
build-and-push-image:
  stage: build
  tags:
    - gitlab-org-docker
  variables:
    BUILDAH_FORMAT: docker
    STORAGE_DRIVER: vfs
  # Usa a imagem oficial do Docker para executar comandos docker
  image: quay.io/buildah/stable
  before_script:
    - echo "$DOCKER_PASS" | buildah login -u "$DOCKER_USER" --password-stdin
  script:
    - echo "Construindo a imagem Docker..."
    # Constrói a imagem Docker usando o Dockerfile da aplicação.
    - buildah build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - echo "Enviando a imagem para o Docker Hub..."
    # Envia a imagem construída para o repositório do Docker Hub.
    - buildah push "docker.io/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"

# Job para acionar o deploy no Render
deploy-to-render:
  stage: deploy
  # Usa uma imagem leve com cURL para fazer a chamada ao deploy hook
  image: curlimages/curl:latest
  script:
    - echo "Triggering deployment on Render..."
    # Executa a chamada para o Deploy Hook do Render.
    # A URL do hook deve ser configurada como uma variável de ambiente no GitLab.
    - 'curl -X POST "$RENDER_DEPLOY_HOOK_URL"'
  # Este job só deve ser executado na branch 'main'
  only:
    - main